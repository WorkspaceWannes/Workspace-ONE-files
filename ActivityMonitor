<#
.DESCRIPTION
	Powershell script which monitors if a device is actively used by its owner.
    By no means this script is intended to tell us something about a user's productivity. It only tells if a device is actively used or not, so it can be reclaimed if not being used.
    The script checks event viewer for logon/logoff/lock/unlock events and calculates the total active time, total locked time and total idle time of the device.
    It creates a log file which is stored together with all intelligent Hub files, as well as registry keys which can be read by using WS1 sensors.

.Author(s):
	Wannes De Boodt - Business Transformation - VMware PSO

.Prerequisites:
	Requires domain joined machines

.NOTES
	changelog:
	23-10-23 - wdeb79mx - Initial version
#>

#=============================================================
# Parameters
#=============================================================
# Define the log path and log file
$logpath = "C:\ProgramData\AirWatch\UnifiedAgent\Logs"
$logfile = "C:\ProgramData\AirWatch\UnifiedAgent\Logs\ActivityMonitor.log"

# Define the event IDs, logon type, lock/unlock event IDs and username
$logonEventID = 4624
$logoffEventID = 4647
$lockEventID = 4800
$unlockEventID = 4801
$logonTypes = 2, 11
$username = "wdeb79mx"
$Date = (Get-Date).AddDays(-30)  # Only look at events from the last 30 days

# Initialize statistics
$totalLockedTime = [TimeSpan]::Zero
$totalActiveTime = [TimeSpan]::Zero
$totalIdleTime = [TimeSpan]::Zero
$firstLogonTime = $null
$lastLogoffTime = $null
$sessionCount = 0

#=============================================================
# Create Log Path
#=============================================================
if(-not (Test-Path $logpath)){
    New-Item -ItemType Directory -Path $logpath -Force
}
function Write-Log {
    param($msg)
    "$(Get-Date -Format G): $msg" | Out-File -FilePath $logfile -Append -Force
}

#=============================================================
# Function to write results to registry
#=============================================================
function Set-RegistryValue {
    param (
        [string]$RegKeyName,
        [object]$variableValue
    )
    $regTagPath = "HKLM:\SOFTWARE\AirbusMDM\ActivityMonitor"

    # Check if registry key exists
    if (!(Test-Path $regtagpath)) {
        # Create registry key if it doesn't exist
        New-Item -Path $regtagpath -ItemType RegistryKey | Out-Null
    }

    # Check if registry value exists
    if (!(Get-ItemProperty -Path $regtagpath -Name $RegKeyName -ErrorAction SilentlyContinue)) {
        # Create registry value if it doesn't exist
        New-ItemProperty -Path $regtagpath -Name $RegKeyName -Value $variableValue -PropertyType String | Out-Null
    }

    # Set registry value to variable value
    Set-ItemProperty -Path $regtagpath -Name $RegKeyName -Value $variableValue
}

#=============================================================
# Gather the relevant events in Event Viewer
#=============================================================
function Get-Events($eventID) {
    Get-WinEvent -FilterHashtable @{
        LogName   = 'Security'
        ID        = $eventID
        StartTime = $Date
    } -ErrorAction SilentlyContinue
}

$logonEvents = Get-Events $logonEventID | Where-Object {
    ($logonTypes -contains $_.Properties[8].Value) -and ($_.Properties[5].Value -eq $username)
}

$logoffEvents = Get-Events $logoffEventID | Where-Object { $_.Properties[1].Value -eq $username }
$lockEvents = Get-Events $lockEventID | Where-Object { $_.Properties[1].Value -eq $username }
$unlockEvents = Get-Events $unlockEventID | Where-Object { $_.Properties[1].Value -eq $username }

Write-Log "Listing all completed sessions of last 30 days:"
$logonEvents | Sort-Object TimeCreated | ForEach-Object {
    if ($null -eq $firstLogonTime) {
        $firstLogonTime = $_.TimeCreated
    }

    $logonTime = $_.TimeCreated
    $logonID = $_.Properties[7].Value

    $matchedLogoff = $logoffEvents | Where-Object { $_.Properties[3].Value -eq $logonID } | Select-Object -First 1

    if ($matchedLogoff) {
        $logoffTime = $matchedLogoff.TimeCreated
        $lastLogoffTime = $logoffTime  # Keep track of the last logoff time

        # Calculate locked durations within this session
        $lockedDurationSum = @()
        $relevantLockEvents = $lockEvents | Where-Object { $_.TimeCreated -ge $logonTime -and $_.TimeCreated -le $logoffTime }

        $lastUnlockTime = $logonTime
        $relevantLockEvents | ForEach-Object {
            $lockTime = $_.TimeCreated
            $matchedUnlock = $unlockEvents | Where-Object { $_.TimeCreated -gt $lockTime -and $_.TimeCreated -le $logoffTime -and $_.TimeCreated -gt $lastUnlockTime } | Select-Object -First 1

            if ($matchedUnlock) {
                $unlockTime = $matchedUnlock.TimeCreated
                $lockedDuration = $unlockTime - $lockTime
                $lockedDurationSum += $lockedDuration
                $lastUnlockTime = $unlockTime
            }
        }

        # Subtract locked durations from session length
        $sessionLength = $logoffTime - $logonTime
        $totalLockedTimeInSession = [TimeSpan]::FromTicks(($lockedDurationSum | Measure-Object -Property Ticks -Sum).Sum)
        $totalLockedTime += $totalLockedTimeInSession  # Update the total locked time
        
        $activeSessionTime = $sessionLength - $totalLockedTimeInSession
        $totalActiveTime += $activeSessionTime  # Update the total active time

        # Convert to readable format
        $days = $activeSessionTime.Days
        $hours = $activeSessionTime.Hours
        $minutes = $activeSessionTime.Minutes
        $seconds = $activeSessionTime.Seconds

        Write-Log "Logon Time: $logonTime | Logoff Time: $logoffTime | Active Session Length: ${days}d ${hours}h ${minutes}m ${seconds}s | Locked Duration: $($lockedDurationSum.Hours)h $($lockedDurationSum.Minutes)m $($lockedDurationSum.Seconds)s"
        $sessionDurations += $activeSessionTime
        $sessionCount++
    }
}

#=============================================================
# Calculate statistics
#=============================================================
Write-Log "`nCalculate Statistics:"
# Output the sum of all user sessions (total locked time + total active time)
$sumOfAllSessions = $totalLockedTime + $totalActiveTime
Write-Log "Total time of all completed sessions: $($sumOfAllSessions.Days)d $($sumOfAllSessions.Hours)h $($sumOfAllSessions.Minutes)m $($sumOfAllSessions.Seconds)s"

# Calculate the total time that has passed since the first user logon
if ($null -ne $firstLogonTime -and $null -ne $lastLogoffTime) {
    $totalTimeSinceFirstLogon = $lastLogoffTime - $firstLogonTime

    # Calculate the total idle time
    $totalIdleTime = $totalTimeSinceFirstLogon - $sumOfAllSessions
    Write-Log "Total Idle Time: $($totalIdleTime.Days)d $($totalIdleTime.Hours)h $($totalIdleTime.Minutes)m $($totalIdleTime.Seconds)s"
}

# Output the total locked time
Write-Log "Total Locked Time: $($totalLockedTime.Days)d $($totalLockedTime.Hours)h $($totalLockedTime.Minutes)m $($totalLockedTime.Seconds)s"

# Output the total active time
Write-Log "Total Active Time: $($totalActiveTime.Days)d $($totalActiveTime.Hours)h $($totalActiveTime.Minutes)m $($totalActiveTime.Seconds)s"

# Calculate average session time
if ($sessionDurations.Count -gt 0) {
    $totalSeconds = ($sessionDurations | Measure-Object -Property TotalSeconds -Sum).Sum
    $averageSessionDuration = [TimeSpan]::FromSeconds($totalSeconds / $sessionDurations.Count)
    Write-Log "Average Active Session Length: $($averageSessionDuration.Hours)h $($averageSessionDuration.Minutes)m $($averageSessionDuration.Seconds)s"
}

# Calculate percentages
if ($totalTimeSinceFirstLogon.Ticks -gt 0) {
    $idleTimePercentage = ($totalIdleTime.Ticks / $totalTimeSinceFirstLogon.Ticks) * 100
    Set-RegistryValue "idleTimePercentage" $idleTimePercentage
    $totalLockedTimePercentage = ($totalLockedTime.Ticks / $totalTimeSinceFirstLogon.Ticks) * 100
    Set-RegistryValue "totalLockedTimePercentage" $totalLockedTimePercentage
    $totalActiveTimePercentage = ($totalActiveTime.Ticks / $totalTimeSinceFirstLogon.Ticks) * 100
    Set-RegistryValue "totalActiveTimePercentage" $totalActiveTimePercentage

    Write-Log "Idle Time Percentage: $($idleTimePercentage)%" 
    Write-Log "Total Locked Time Percentage: $($totalLockedTimePercentage)%"
    Write-Log "Total Active Time Percentage: $($totalActiveTimePercentage)%"
}

# Output total number of sessions
Write-Log "Total Number of Sessions: $sessionCount"
Set-RegistryValue "sessionCount" $sessionCount

# Output the last unlock event time
$lastUnlockEvent = $unlockEvents | Sort-Object TimeCreated | Select-Object -Last 1
if ($lastUnlockEvent) {
    $lastUnlockEventTime = $lastUnlockEvent.TimeCreated
    Write-Log "Last reported unlock event: $lastUnlockEventTime"
    Set-RegistryValue "lastUnlockEventTime" $lastUnlockEventTime
}

#count the number of unlock events for the user
$unlockEventCount = $unlockEvents.Count
Write-Log "Number of unlock events: $unlockEventCount"
Set-RegistryValue "unlockEventCount" $unlockEventCount

# add script last execution time to registry
$lastExecutionTime = Get-Date -format "MM/dd/yyyy HH:mm"
Set-RegistryValue "lastExecutionTime" $lastExecutionTime